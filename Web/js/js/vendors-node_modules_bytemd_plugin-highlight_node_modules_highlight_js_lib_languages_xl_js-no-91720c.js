/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkvadmin_front"] = self["webpackChunkvadmin_front"] || []).push([["vendors-node_modules_bytemd_plugin-highlight_node_modules_highlight_js_lib_languages_xl_js-no-91720c"],{

/***/ "./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xl.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xl.js ***!
  \*********************************************************************************************/
/***/ (function(module) {

eval("/*\nLanguage: XL\nAuthor: Christophe de Dinechin <christophe@taodyne.com>\nDescription: An extensible programming language, based on parse tree rewriting\nWebsite: http://xlr.sf.net\n*/\nfunction xl(hljs) {\n  const KWS = [\"if\", \"then\", \"else\", \"do\", \"while\", \"until\", \"for\", \"loop\", \"import\", \"with\", \"is\", \"as\", \"where\", \"when\", \"by\", \"data\", \"constant\", \"integer\", \"real\", \"text\", \"name\", \"boolean\", \"symbol\", \"infix\", \"prefix\", \"postfix\", \"block\", \"tree\"];\n  const BUILT_INS = [\"in\", \"mod\", \"rem\", \"and\", \"or\", \"xor\", \"not\", \"abs\", \"sign\", \"floor\", \"ceil\", \"sqrt\", \"sin\", \"cos\", \"tan\", \"asin\", \"acos\", \"atan\", \"exp\", \"expm1\", \"log\", \"log2\", \"log10\", \"log1p\", \"pi\", \"at\", \"text_length\", \"text_range\", \"text_find\", \"text_replace\", \"contains\", \"page\", \"slide\", \"basic_slide\", \"title_slide\", \"title\", \"subtitle\", \"fade_in\", \"fade_out\", \"fade_at\", \"clear_color\", \"color\", \"line_color\", \"line_width\", \"texture_wrap\", \"texture_transform\", \"texture\", \"scale_?x\", \"scale_?y\", \"scale_?z?\", \"translate_?x\", \"translate_?y\", \"translate_?z?\", \"rotate_?x\", \"rotate_?y\", \"rotate_?z?\", \"rectangle\", \"circle\", \"ellipse\", \"sphere\", \"path\", \"line_to\", \"move_to\", \"quad_to\", \"curve_to\", \"theme\", \"background\", \"contents\", \"locally\", \"time\", \"mouse_?x\", \"mouse_?y\", \"mouse_buttons\"];\n  const BUILTIN_MODULES = [\"ObjectLoader\", \"Animate\", \"MovieCredits\", \"Slides\", \"Filters\", \"Shading\", \"Materials\", \"LensFlare\", \"Mapping\", \"VLCAudioVideo\", \"StereoDecoder\", \"PointCloud\", \"NetworkAccess\", \"RemoteControl\", \"RegExp\", \"ChromaKey\", \"Snowfall\", \"NodeJS\", \"Speech\", \"Charts\"];\n  const LITERALS = [\"true\", \"false\", \"nil\"];\n  const KEYWORDS = {\n    $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,\n    keyword: KWS,\n    literal: LITERALS,\n    built_in: BUILT_INS.concat(BUILTIN_MODULES)\n  };\n  const DOUBLE_QUOTE_TEXT = {\n    className: 'string',\n    begin: '\"',\n    end: '\"',\n    illegal: '\\\\n'\n  };\n  const SINGLE_QUOTE_TEXT = {\n    className: 'string',\n    begin: '\\'',\n    end: '\\'',\n    illegal: '\\\\n'\n  };\n  const LONG_TEXT = {\n    className: 'string',\n    begin: '<<',\n    end: '>>'\n  };\n  const BASED_NUMBER = {\n    className: 'number',\n    begin: '[0-9]+#[0-9A-Z_]+(\\\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'\n  };\n  const IMPORT = {\n    beginKeywords: 'import',\n    end: '$',\n    keywords: KEYWORDS,\n    contains: [DOUBLE_QUOTE_TEXT]\n  };\n  const FUNCTION_DEFINITION = {\n    className: 'function',\n    begin: /[a-z][^\\n]*->/,\n    returnBegin: true,\n    end: /->/,\n    contains: [hljs.inherit(hljs.TITLE_MODE, {\n      starts: {\n        endsWithParent: true,\n        keywords: KEYWORDS\n      }\n    })]\n  };\n  return {\n    name: 'XL',\n    aliases: ['tao'],\n    keywords: KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, DOUBLE_QUOTE_TEXT, SINGLE_QUOTE_TEXT, LONG_TEXT, FUNCTION_DEFINITION, IMPORT, BASED_NUMBER, hljs.NUMBER_MODE]\n  };\n}\n\nmodule.exports = xl;\n\n//# sourceURL=webpack://vadmin-front/./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xl.js?");

/***/ }),

/***/ "./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xml.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xml.js ***!
  \**********************************************************************************************/
/***/ (function(module) {

eval("/*\nLanguage: HTML, XML\nWebsite: https://www.w3.org/XML/\nCategory: common, web\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction xml(hljs) {\n  const regex = hljs.regex; // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar\n  // OTHER_NAME_CHARS = /[:\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]/;\n  // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods\n  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);;\n  // const XML_IDENT_RE = /[A-Z_a-z:\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]+/;\n  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);\n  // however, to cater for performance and more Unicode support rely simply on the Unicode letter class\n\n  const TAG_NAME_RE = regex.concat(/[\\p{L}_]/u, regex.optional(/[\\p{L}0-9_.-]*:/u), /[\\p{L}0-9_.-]*/u);\n  const XML_IDENT_RE = /[\\p{L}0-9._:-]+/u;\n  const XML_ENTITIES = {\n    className: 'symbol',\n    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n  };\n  const XML_META_KEYWORDS = {\n    begin: /\\s/,\n    contains: [{\n      className: 'keyword',\n      begin: /#?[a-z_][a-z1-9_-]+/,\n      illegal: /\\n/\n    }]\n  };\n  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n    begin: /\\(/,\n    end: /\\)/\n  });\n  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\n    className: 'string'\n  });\n  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    className: 'string'\n  });\n  const TAG_INTERNALS = {\n    endsWithParent: true,\n    illegal: /</,\n    relevance: 0,\n    contains: [{\n      className: 'attr',\n      begin: XML_IDENT_RE,\n      relevance: 0\n    }, {\n      begin: /=\\s*/,\n      relevance: 0,\n      contains: [{\n        className: 'string',\n        endsParent: true,\n        variants: [{\n          begin: /\"/,\n          end: /\"/,\n          contains: [XML_ENTITIES]\n        }, {\n          begin: /'/,\n          end: /'/,\n          contains: [XML_ENTITIES]\n        }, {\n          begin: /[^\\s\"'=<>`]+/\n        }]\n      }]\n    }]\n  };\n  return {\n    name: 'HTML, XML',\n    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist', 'wsf', 'svg'],\n    case_insensitive: true,\n    unicodeRegex: true,\n    contains: [{\n      className: 'meta',\n      begin: /<![a-z]/,\n      end: />/,\n      relevance: 10,\n      contains: [XML_META_KEYWORDS, QUOTE_META_STRING_MODE, APOS_META_STRING_MODE, XML_META_PAR_KEYWORDS, {\n        begin: /\\[/,\n        end: /\\]/,\n        contains: [{\n          className: 'meta',\n          begin: /<![a-z]/,\n          end: />/,\n          contains: [XML_META_KEYWORDS, XML_META_PAR_KEYWORDS, QUOTE_META_STRING_MODE, APOS_META_STRING_MODE]\n        }]\n      }]\n    }, hljs.COMMENT(/<!--/, /-->/, {\n      relevance: 10\n    }), {\n      begin: /<!\\[CDATA\\[/,\n      end: /\\]\\]>/,\n      relevance: 10\n    }, XML_ENTITIES, // xml processing instructions\n    {\n      className: 'meta',\n      end: /\\?>/,\n      variants: [{\n        begin: /<\\?xml/,\n        relevance: 10,\n        contains: [QUOTE_META_STRING_MODE]\n      }, {\n        begin: /<\\?[a-z][a-z0-9]+/\n      }]\n    }, {\n      className: 'tag',\n\n      /*\n      The lookahead pattern (?=...) ensures that 'begin' only matches\n      '<style' as a single word, followed by a whitespace or an\n      ending bracket.\n      */\n      begin: /<style(?=\\s|>)/,\n      end: />/,\n      keywords: {\n        name: 'style'\n      },\n      contains: [TAG_INTERNALS],\n      starts: {\n        end: /<\\/style>/,\n        returnEnd: true,\n        subLanguage: ['css', 'xml']\n      }\n    }, {\n      className: 'tag',\n      // See the comment in the <style tag about the lookahead pattern\n      begin: /<script(?=\\s|>)/,\n      end: />/,\n      keywords: {\n        name: 'script'\n      },\n      contains: [TAG_INTERNALS],\n      starts: {\n        end: /<\\/script>/,\n        returnEnd: true,\n        subLanguage: ['javascript', 'handlebars', 'xml']\n      }\n    }, // we need this for now for jSX\n    {\n      className: 'tag',\n      begin: /<>|<\\/>/\n    }, // open tag\n    {\n      className: 'tag',\n      begin: regex.concat(/</, regex.lookahead(regex.concat(TAG_NAME_RE, // <tag/>\n      // <tag>\n      // <tag ...\n      regex.either(/\\/>/, />/, /\\s/)))),\n      end: /\\/?>/,\n      contains: [{\n        className: 'name',\n        begin: TAG_NAME_RE,\n        relevance: 0,\n        starts: TAG_INTERNALS\n      }]\n    }, // close tag\n    {\n      className: 'tag',\n      begin: regex.concat(/<\\//, regex.lookahead(regex.concat(TAG_NAME_RE, />/))),\n      contains: [{\n        className: 'name',\n        begin: TAG_NAME_RE,\n        relevance: 0\n      }, {\n        begin: />/,\n        relevance: 0,\n        endsParent: true\n      }]\n    }]\n  };\n}\n\nmodule.exports = xml;\n\n//# sourceURL=webpack://vadmin-front/./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xml.js?");

/***/ }),

/***/ "./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xquery.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xquery.js ***!
  \*************************************************************************************************/
/***/ (function(module) {

eval("/*\nLanguage: XQuery\nAuthor: Dirk Kirsten <dk@basex.org>\nContributor: Duncan Paterson\nDescription: Supports XQuery 3.1 including XQuery Update 3, so also XPath (as it is a superset)\nRefactored to process xml constructor syntax and function-bodies. Added missing data-types, xpath operands, inbuilt functions, and query prologs\nWebsite: https://www.w3.org/XML/Query/\nCategory: functional\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction xquery(_hljs) {\n  // see https://www.w3.org/TR/xquery/#id-terminal-delimitation\n  const KEYWORDS = [\"module\", \"schema\", \"namespace\", \"boundary-space\", \"preserve\", \"no-preserve\", \"strip\", \"default\", \"collation\", \"base-uri\", \"ordering\", \"context\", \"decimal-format\", \"decimal-separator\", \"copy-namespaces\", \"empty-sequence\", \"except\", \"exponent-separator\", \"external\", \"grouping-separator\", \"inherit\", \"no-inherit\", \"lax\", \"minus-sign\", \"per-mille\", \"percent\", \"schema-attribute\", \"schema-element\", \"strict\", \"unordered\", \"zero-digit\", \"declare\", \"import\", \"option\", \"function\", \"validate\", \"variable\", \"for\", \"at\", \"in\", \"let\", \"where\", \"order\", \"group\", \"by\", \"return\", \"if\", \"then\", \"else\", \"tumbling\", \"sliding\", \"window\", \"start\", \"when\", \"only\", \"end\", \"previous\", \"next\", \"stable\", \"ascending\", \"descending\", \"allowing\", \"empty\", \"greatest\", \"least\", \"some\", \"every\", \"satisfies\", \"switch\", \"case\", \"typeswitch\", \"try\", \"catch\", \"and\", \"or\", \"to\", \"union\", \"intersect\", \"instance\", \"of\", \"treat\", \"as\", \"castable\", \"cast\", \"map\", \"array\", \"delete\", \"insert\", \"into\", \"replace\", \"value\", \"rename\", \"copy\", \"modify\", \"update\"]; // Node Types (sorted by inheritance)\n  // atomic types (sorted by inheritance)\n\n  const TYPES = [\"item\", \"document-node\", \"node\", \"attribute\", \"document\", \"element\", \"comment\", \"namespace\", \"namespace-node\", \"processing-instruction\", \"text\", \"construction\", \"xs:anyAtomicType\", \"xs:untypedAtomic\", \"xs:duration\", \"xs:time\", \"xs:decimal\", \"xs:float\", \"xs:double\", \"xs:gYearMonth\", \"xs:gYear\", \"xs:gMonthDay\", \"xs:gMonth\", \"xs:gDay\", \"xs:boolean\", \"xs:base64Binary\", \"xs:hexBinary\", \"xs:anyURI\", \"xs:QName\", \"xs:NOTATION\", \"xs:dateTime\", \"xs:dateTimeStamp\", \"xs:date\", \"xs:string\", \"xs:normalizedString\", \"xs:token\", \"xs:language\", \"xs:NMTOKEN\", \"xs:Name\", \"xs:NCName\", \"xs:ID\", \"xs:IDREF\", \"xs:ENTITY\", \"xs:integer\", \"xs:nonPositiveInteger\", \"xs:negativeInteger\", \"xs:long\", \"xs:int\", \"xs:short\", \"xs:byte\", \"xs:nonNegativeInteger\", \"xs:unisignedLong\", \"xs:unsignedInt\", \"xs:unsignedShort\", \"xs:unsignedByte\", \"xs:positiveInteger\", \"xs:yearMonthDuration\", \"xs:dayTimeDuration\"];\n  const LITERALS = [\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\", \"is\", \"self::\", \"child::\", \"descendant::\", \"descendant-or-self::\", \"attribute::\", \"following::\", \"following-sibling::\", \"parent::\", \"ancestor::\", \"ancestor-or-self::\", \"preceding::\", \"preceding-sibling::\", \"NaN\"]; // functions (TODO: find regex for op: without breaking build)\n\n  const BUILT_IN = {\n    className: 'built_in',\n    variants: [{\n      begin: /\\barray:/,\n      end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\\b/\n    }, {\n      begin: /\\bmap:/,\n      end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\\b/\n    }, {\n      begin: /\\bmath:/,\n      end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\\b/\n    }, {\n      begin: /\\bop:/,\n      end: /\\(/,\n      excludeEnd: true\n    }, {\n      begin: /\\bfn:/,\n      end: /\\(/,\n      excludeEnd: true\n    }, // do not highlight inbuilt strings as variable or xml element names\n    {\n      begin: /[^</$:'\"-]\\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\\b/\n    }, {\n      begin: /\\blocal:/,\n      end: /\\(/,\n      excludeEnd: true\n    }, {\n      begin: /\\bzip:/,\n      end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\\b/\n    }, {\n      begin: /\\b(?:util|db|functx|app|xdmp|xmldb):/,\n      end: /\\(/,\n      excludeEnd: true\n    }]\n  };\n  const TITLE = {\n    className: 'title',\n    begin: /\\bxquery version \"[13]\\.[01]\"\\s?(?:encoding \".+\")?/,\n    end: /;/\n  };\n  const VAR = {\n    className: 'variable',\n    begin: /[$][\\w\\-:]+/\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: /(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b/,\n    relevance: 0\n  };\n  const STRING = {\n    className: 'string',\n    variants: [{\n      begin: /\"/,\n      end: /\"/,\n      contains: [{\n        begin: /\"\"/,\n        relevance: 0\n      }]\n    }, {\n      begin: /'/,\n      end: /'/,\n      contains: [{\n        begin: /''/,\n        relevance: 0\n      }]\n    }]\n  };\n  const ANNOTATION = {\n    className: 'meta',\n    begin: /%[\\w\\-:]+/\n  };\n  const COMMENT = {\n    className: 'comment',\n    begin: /\\(:/,\n    end: /:\\)/,\n    relevance: 10,\n    contains: [{\n      className: 'doctag',\n      begin: /@\\w+/\n    }]\n  }; // see https://www.w3.org/TR/xquery/#id-computedConstructors\n  // mocha: computed_inbuilt\n  // see https://www.regexpal.com/?fam=99749\n\n  const COMPUTED = {\n    beginKeywords: 'element attribute comment document processing-instruction',\n    end: /\\{/,\n    excludeEnd: true\n  }; // mocha: direct_method\n\n  const DIRECT = {\n    begin: /<([\\w._:-]+)(\\s+\\S*=('|\").*('|\"))?>/,\n    end: /(\\/[\\w._:-]+>)/,\n    subLanguage: 'xml',\n    contains: [{\n      begin: /\\{/,\n      end: /\\}/,\n      subLanguage: 'xquery'\n    }, 'self']\n  };\n  const CONTAINS = [VAR, BUILT_IN, STRING, NUMBER, COMMENT, ANNOTATION, TITLE, COMPUTED, DIRECT];\n  return {\n    name: 'XQuery',\n    aliases: ['xpath', 'xq'],\n    case_insensitive: false,\n    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,\n    keywords: {\n      $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,\n      keyword: KEYWORDS,\n      type: TYPES,\n      literal: LITERALS\n    },\n    contains: CONTAINS\n  };\n}\n\nmodule.exports = xquery;\n\n//# sourceURL=webpack://vadmin-front/./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/xquery.js?");

/***/ }),

/***/ "./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/yaml.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/yaml.js ***!
  \***********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n\n/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/\nfunction yaml(hljs) {\n  const LITERALS = 'true false yes no null'; // YAML spec allows non-reserved URI characters in tags.\n\n  const URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+'; // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n\n  const KEY = {\n    className: 'attr',\n    variants: [{\n      begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)'\n    }, {\n      // double quoted keys\n      begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)'\n    }, {\n      // single quoted keys\n      begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)'\n    }]\n  };\n  const TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [{\n      // jinja templates Ansible\n      begin: /\\{\\{/,\n      end: /\\}\\}/\n    }, {\n      // Ruby i18n\n      begin: /%\\{/,\n      end: /\\}/\n    }]\n  };\n  const STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /\\S+/\n    }],\n    contains: [hljs.BACKSLASH_ESCAPE, TEMPLATE_VARIABLES]\n  }; // Strings inside of value containers (objects) can't contain braces,\n  // brackets, or commas\n\n  const CONTAINER_STRING = hljs.inherit(STRING, {\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /[^\\s,{}[\\]]+/\n    }]\n  });\n  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\n  const TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\n  const FRACTION_RE = '(\\\\.[0-9]*)?';\n  const ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\n  const TIMESTAMP = {\n    className: 'number',\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\n  };\n  const VALUE_CONTAINER = {\n    end: ',',\n    endsWithParent: true,\n    excludeEnd: true,\n    keywords: LITERALS,\n    relevance: 0\n  };\n  const OBJECT = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const ARRAY = {\n    begin: '\\\\[',\n    end: '\\\\]',\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const MODES = [KEY, {\n    className: 'meta',\n    begin: '^---\\\\s*$',\n    relevance: 10\n  }, {\n    // multi line string\n    // Blocks start with a | or > followed by a newline\n    //\n    // Indentation of subsequent lines must be the same to\n    // be considered part of the block\n    className: 'string',\n    begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\n  }, {\n    // Ruby/Rails erb\n    begin: '<%[%=-]?',\n    end: '[%-]?%>',\n    subLanguage: 'ruby',\n    excludeBegin: true,\n    excludeEnd: true,\n    relevance: 0\n  }, {\n    // named tags\n    className: 'type',\n    begin: '!\\\\w+!' + URI_CHARACTERS\n  }, // https://yaml.org/spec/1.2/spec.html#id2784064\n  {\n    // verbatim tags\n    className: 'type',\n    begin: '!<' + URI_CHARACTERS + \">\"\n  }, {\n    // primary tags\n    className: 'type',\n    begin: '!' + URI_CHARACTERS\n  }, {\n    // secondary tags\n    className: 'type',\n    begin: '!!' + URI_CHARACTERS\n  }, {\n    // fragment id &ref\n    className: 'meta',\n    begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n  }, {\n    // fragment reference *ref\n    className: 'meta',\n    begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n  }, {\n    // array listing\n    className: 'bullet',\n    // TODO: remove |$ hack when we have proper look-ahead support\n    begin: '-(?=[ ]|$)',\n    relevance: 0\n  }, hljs.HASH_COMMENT_MODE, {\n    beginKeywords: LITERALS,\n    keywords: {\n      literal: LITERALS\n    }\n  }, TIMESTAMP, // numbers are any valid C-style number that\n  // sit isolated from other words\n  {\n    className: 'number',\n    begin: hljs.C_NUMBER_RE + '\\\\b',\n    relevance: 0\n  }, OBJECT, ARRAY, STRING];\n  const VALUE_MODES = [...MODES];\n  VALUE_MODES.pop();\n  VALUE_MODES.push(CONTAINER_STRING);\n  VALUE_CONTAINER.contains = VALUE_MODES;\n  return {\n    name: 'YAML',\n    case_insensitive: true,\n    aliases: ['yml'],\n    contains: MODES\n  };\n}\n\nmodule.exports = yaml;\n\n//# sourceURL=webpack://vadmin-front/./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/yaml.js?");

/***/ }),

/***/ "./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/zephir.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/zephir.js ***!
  \*************************************************************************************************/
/***/ (function(module) {

eval("/*\n Language: Zephir\n Description: Zephir, an open source, high-level language designed to ease the creation and maintainability of extensions for PHP with a focus on type and memory safety.\n Author: Oleg Efimov <efimovov@gmail.com>\n Website: https://zephir-lang.com/en\n Audit: 2020\n */\n\n/** @type LanguageFn */\nfunction zephir(hljs) {\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [hljs.inherit(hljs.APOS_STRING_MODE, {\n      illegal: null\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      illegal: null\n    })]\n  };\n  const TITLE_MODE = hljs.UNDERSCORE_TITLE_MODE;\n  const NUMBER = {\n    variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\n  };\n  const KEYWORDS = // classes and objects\n  'namespace class interface use extends ' + 'function return ' + 'abstract final public protected private static deprecated ' // error handling\n  + 'throw try catch Exception ' // keyword-ish things their website does NOT seem to highlight (in their own snippets)\n  // 'typeof fetch in ' +\n  // operators/helpers\n  + 'echo empty isset instanceof unset ' // assignment/variables\n  + 'let var new const self ' // control\n  + 'require ' + 'if else elseif switch case default ' + 'do while loop for continue break ' + 'likely unlikely ' // magic constants\n  // https://github.com/phalcon/zephir/blob/master/Library/Expression/Constants.php\n  + '__LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ ' // types - https://docs.zephir-lang.com/0.12/en/types\n  + 'array boolean float double integer object resource string ' + 'char long unsigned bool int uint ulong uchar ' // built-ins\n  + 'true false null undefined';\n  return {\n    name: 'Zephir',\n    aliases: ['zep'],\n    keywords: KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT(/\\/\\*/, /\\*\\//, {\n      contains: [{\n        className: 'doctag',\n        begin: /@[A-Za-z]+/\n      }]\n    }), {\n      className: 'string',\n      begin: /<<<['\"]?\\w+['\"]?$/,\n      end: /^\\w+;/,\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      // swallow composed identifiers to avoid parsing them as keywords\n      begin: /(::|->)+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/\n    }, {\n      className: 'function',\n      beginKeywords: 'function fn',\n      end: /[;{]/,\n      excludeEnd: true,\n      illegal: /\\$|\\[|%/,\n      contains: [TITLE_MODE, {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: ['self', hljs.C_BLOCK_COMMENT_MODE, STRING, NUMBER]\n      }]\n    }, {\n      className: 'class',\n      beginKeywords: 'class interface',\n      end: /\\{/,\n      excludeEnd: true,\n      illegal: /[:($\"]/,\n      contains: [{\n        beginKeywords: 'extends implements'\n      }, TITLE_MODE]\n    }, {\n      beginKeywords: 'namespace',\n      end: /;/,\n      illegal: /[.']/,\n      contains: [TITLE_MODE]\n    }, {\n      beginKeywords: 'use',\n      end: /;/,\n      contains: [TITLE_MODE]\n    }, {\n      begin: /=>/ // No markup, just a relevance booster\n\n    }, STRING, NUMBER]\n  };\n}\n\nmodule.exports = zephir;\n\n//# sourceURL=webpack://vadmin-front/./node_modules/@bytemd/plugin-highlight/node_modules/highlight.js/lib/languages/zephir.js?");

/***/ })

}]);
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkvadmin_front"] = self["webpackChunkvadmin_front"] || []).push([["vendors-node_modules_mdast-util-gfm_lib_index_js"],{

/***/ "./node_modules/mdast-util-gfm-autolink-literal/lib/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mdast-util-gfm-autolink-literal/lib/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gfmAutolinkLiteralFromMarkdown\": function() { return /* binding */ gfmAutolinkLiteralFromMarkdown; },\n/* harmony export */   \"gfmAutolinkLiteralToMarkdown\": function() { return /* binding */ gfmAutolinkLiteralToMarkdown; }\n/* harmony export */ });\n/* harmony import */ var ccount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ccount */ \"./node_modules/ccount/index.js\");\n/* harmony import */ var mdast_util_find_and_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-find-and-replace */ \"./node_modules/mdast-util-find-and-replace/lib/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"./node_modules/micromark-util-character/dev/index.js\");\n/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\n\n\n/** @type {ConstructName} */\n\nconst inConstruct = 'phrasing';\n/** @type {Array<ConstructName>} */\n\nconst notInConstruct = ['autolink', 'link', 'image', 'label']; // To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\n\nconst gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n};\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\n\nconst gfmAutolinkLiteralToMarkdown = {\n  unsafe: [{\n    character: '@',\n    before: '[+\\\\-.\\\\w]',\n    after: '[\\\\-.\\\\w]',\n    inConstruct,\n    notInConstruct\n  }, {\n    character: '.',\n    before: '[Ww]',\n    after: '[\\\\-.\\\\w]',\n    inConstruct,\n    notInConstruct\n  }, {\n    character: ':',\n    before: '[ps]',\n    after: '\\\\/',\n    inConstruct,\n    notInConstruct\n  }]\n};\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nfunction enterLiteralAutolink(token) {\n  this.enter({\n    type: 'link',\n    title: null,\n    url: '',\n    children: []\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token);\n  const node =\n  /** @type {Link} */\n  this.stack[this.stack.length - 1];\n  node.url = 'http://' + this.sliceSerialize(token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitLiteralAutolink(token) {\n  this.exit(token);\n}\n/** @type {FromMarkdownTransform} */\n\n\nfunction transformGfmAutolinkLiterals(tree) {\n  (0,mdast_util_find_and_replace__WEBPACK_IMPORTED_MODULE_0__.findAndReplace)(tree, [[/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl], [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]], {\n    ignore: ['link', 'linkReference']\n  });\n}\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\n\n\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''; // Not an expected previous character.\n\n  if (!previous(match)) {\n    return false;\n  } // Treat `www` as part of the domain.\n\n\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain;\n    protocol = '';\n    prefix = 'http://';\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false;\n  }\n\n  const parts = splitUrl(domain + path);\n  if (!parts[0]) return false;\n  /** @type {Link} */\n\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{\n      type: 'text',\n      value: protocol + parts[0]\n    }]\n  };\n\n  if (parts[1]) {\n    return [result, {\n      type: 'text',\n      value: parts[1]\n    }];\n  }\n\n  return result;\n}\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\n\n\nfunction findEmail(_, atext, label, match) {\n  if ( // Not an expected previous character.\n  !previous(match, true) || // Label ends in not allowed character.\n  /[-\\d_]$/.test(label)) {\n    return false;\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{\n      type: 'text',\n      value: atext + '@' + label\n    }]\n  };\n}\n/**\n * @param {string} domain\n * @returns {boolean}\n */\n\n\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.');\n\n  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 2]))) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\n\n\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url);\n\n  if (!trailExec) {\n    return [url, undefined];\n  }\n\n  url = url.slice(0, trailExec.index);\n  let trail = trailExec[0];\n  let closingParenIndex = trail.indexOf(')');\n  const openingParens = (0,ccount__WEBPACK_IMPORTED_MODULE_1__.ccount)(url, '(');\n  let closingParens = (0,ccount__WEBPACK_IMPORTED_MODULE_1__.ccount)(url, ')');\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1);\n    trail = trail.slice(closingParenIndex + 1);\n    closingParenIndex = trail.indexOf(')');\n    closingParens++;\n  }\n\n  return [url, trail];\n}\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\n\n\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1);\n  return (match.index === 0 || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodePunctuation)(code)) && (!email || code !== 47);\n}\n\n//# sourceURL=webpack://vadmin-front/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js?");

/***/ }),

/***/ "./node_modules/mdast-util-gfm-footnote/lib/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/mdast-util-gfm-footnote/lib/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gfmFootnoteFromMarkdown\": function() { return /* binding */ gfmFootnoteFromMarkdown; },\n/* harmony export */   \"gfmFootnoteToMarkdown\": function() { return /* binding */ gfmFootnoteToMarkdown; }\n/* harmony export */ });\n/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-normalize-identifier */ \"./node_modules/micromark-util-normalize-identifier/dev/index.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_association_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/association.js */ \"./node_modules/mdast-util-to-markdown/lib/util/association.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_container_flow_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/container-flow.js */ \"./node_modules/mdast-util-to-markdown/lib/util/container-flow.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_indent_lines_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/indent-lines.js */ \"./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_safe_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/safe.js */ \"./node_modules/mdast-util-to-markdown/lib/util/safe.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/track.js */ \"./node_modules/mdast-util-to-markdown/lib/util/track.js\");\n/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\n\n\n\n\n\nfootnoteReference.peek = footnoteReferencePeek; // To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\n\nfunction gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  };\n}\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\n\nfunction gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{\n      character: '[',\n      inConstruct: ['phrasing', 'label', 'reference']\n    }],\n    handlers: {\n      footnoteDefinition,\n      footnoteReference\n    }\n  };\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nfunction enterFootnoteDefinition(token) {\n  this.enter({\n    type: 'footnoteDefinition',\n    identifier: '',\n    label: '',\n    children: []\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume();\n  const node =\n  /** @type {FootnoteDefinition} */\n  this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_0__.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteDefinition(token) {\n  this.exit(token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteCall(token) {\n  this.enter({\n    type: 'footnoteReference',\n    identifier: '',\n    label: ''\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteCallString() {\n  this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteCallString(token) {\n  const label = this.resume();\n  const node =\n  /** @type {FootnoteDefinition} */\n  this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_0__.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteCall(token) {\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\n\n\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = (0,mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_1__.track)(safeOptions);\n  let value = tracker.move('[^');\n  const exit = context.enter('footnoteReference');\n  const subexit = context.enter('reference');\n  value += tracker.move((0,mdast_util_to_markdown_lib_util_safe_js__WEBPACK_IMPORTED_MODULE_2__.safe)(context, (0,mdast_util_to_markdown_lib_util_association_js__WEBPACK_IMPORTED_MODULE_3__.association)(node), { ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  exit();\n  value += tracker.move(']');\n  return value;\n}\n/** @type {ToMarkdownHandle} */\n\n\nfunction footnoteReferencePeek() {\n  return '[';\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\n\n\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = (0,mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_1__.track)(safeOptions);\n  let value = tracker.move('[^');\n  const exit = context.enter('footnoteDefinition');\n  const subexit = context.enter('label');\n  value += tracker.move((0,mdast_util_to_markdown_lib_util_safe_js__WEBPACK_IMPORTED_MODULE_2__.safe)(context, (0,mdast_util_to_markdown_lib_util_association_js__WEBPACK_IMPORTED_MODULE_3__.association)(node), { ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  value += tracker.move(']:' + (node.children && node.children.length > 0 ? ' ' : ''));\n  tracker.shift(4);\n  value += tracker.move((0,mdast_util_to_markdown_lib_util_indent_lines_js__WEBPACK_IMPORTED_MODULE_4__.indentLines)((0,mdast_util_to_markdown_lib_util_container_flow_js__WEBPACK_IMPORTED_MODULE_5__.containerFlow)(node, context, tracker.current()), map));\n  exit();\n  return value;\n}\n/** @type {Map} */\n\n\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line;\n  }\n\n  return (blank ? '' : '    ') + line;\n}\n\n//# sourceURL=webpack://vadmin-front/./node_modules/mdast-util-gfm-footnote/lib/index.js?");

/***/ }),

/***/ "./node_modules/mdast-util-gfm-strikethrough/lib/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/mdast-util-gfm-strikethrough/lib/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gfmStrikethroughFromMarkdown\": function() { return /* binding */ gfmStrikethroughFromMarkdown; },\n/* harmony export */   \"gfmStrikethroughToMarkdown\": function() { return /* binding */ gfmStrikethroughToMarkdown; }\n/* harmony export */ });\n/* harmony import */ var mdast_util_to_markdown_lib_util_container_phrasing_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/container-phrasing.js */ \"./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/track.js */ \"./node_modules/mdast-util-to-markdown/lib/util/track.js\");\n/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n // To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\n\nconst constructsWithoutStrikethrough = ['autolink', 'destinationLiteral', 'destinationRaw', 'reference', 'titleQuote', 'titleApostrophe'];\nhandleDelete.peek = peekDelete;\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\n\nconst gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {\n    strikethrough: enterStrikethrough\n  },\n  exit: {\n    strikethrough: exitStrikethrough\n  }\n};\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\n\nconst gfmStrikethroughToMarkdown = {\n  unsafe: [{\n    character: '~',\n    inConstruct: 'phrasing',\n    notInConstruct: constructsWithoutStrikethrough\n  }],\n  handlers: {\n    delete: handleDelete\n  }\n};\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nfunction enterStrikethrough(token) {\n  this.enter({\n    type: 'delete',\n    children: []\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitStrikethrough(token) {\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\n\n\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = (0,mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_0__.track)(safeOptions);\n  const exit = context.enter('strikethrough');\n  let value = tracker.move('~~');\n  value += (0,mdast_util_to_markdown_lib_util_container_phrasing_js__WEBPACK_IMPORTED_MODULE_1__.containerPhrasing)(node, context, { ...tracker.current(),\n    before: value,\n    after: '~'\n  });\n  value += tracker.move('~~');\n  exit();\n  return value;\n}\n/** @type {ToMarkdownHandle} */\n\n\nfunction peekDelete() {\n  return '~';\n}\n\n//# sourceURL=webpack://vadmin-front/./node_modules/mdast-util-gfm-strikethrough/lib/index.js?");

/***/ }),

/***/ "./node_modules/mdast-util-gfm-table/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/mdast-util-gfm-table/lib/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gfmTableFromMarkdown\": function() { return /* binding */ gfmTableFromMarkdown; },\n/* harmony export */   \"gfmTableToMarkdown\": function() { return /* binding */ gfmTableToMarkdown; }\n/* harmony export */ });\n/* harmony import */ var mdast_util_to_markdown_lib_util_container_phrasing_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/container-phrasing.js */ \"./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_handle_inline_code_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mdast-util-to-markdown/lib/handle/inline-code.js */ \"./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js\");\n/* harmony import */ var markdown_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! markdown-table */ \"./node_modules/markdown-table/index.js\");\n/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\n\n // To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\n\nconst gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n};\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align;\n  this.enter({\n    type: 'table',\n    align: align.map(d => d === 'none' ? null : d),\n    children: []\n  }, token);\n  this.setData('inTable', true);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitTable(token) {\n  this.exit(token);\n  this.setData('inTable');\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterRow(token) {\n  this.enter({\n    type: 'tableRow',\n    children: []\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exit(token) {\n  this.exit(token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterCell(token) {\n  this.enter({\n    type: 'tableCell',\n    children: []\n  }, token);\n} // Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitCodeText(token) {\n  let value = this.resume();\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace);\n  }\n\n  const node =\n  /** @type {InlineCode} */\n  this.stack[this.stack.length - 1];\n  node.value = value;\n  this.exit(token);\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\n\n\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\n\n\nfunction gfmTableToMarkdown(options) {\n  const settings = options || {};\n  const padding = settings.tableCellPadding;\n  const alignDelimiters = settings.tablePipeAlign;\n  const stringLength = settings.stringLength;\n  const around = padding ? ' ' : '|';\n  return {\n    unsafe: [{\n      character: '\\r',\n      inConstruct: 'tableCell'\n    }, {\n      character: '\\n',\n      inConstruct: 'tableCell'\n    }, // A pipe, when followed by a tab or space (padding), or a dash or colon\n    // (unpadded delimiter row), could result in a table.\n    {\n      atBreak: true,\n      character: '|',\n      after: '[\\t :-]'\n    }, // A pipe in a cell must be encoded.\n    {\n      character: '|',\n      inConstruct: 'tableCell'\n    }, // A colon must be followed by a dash, in which case it could start a\n    // delimiter row.\n    {\n      atBreak: true,\n      character: ':',\n      after: '-'\n    }, // A delimiter row can also start with a dash, when followed by more\n    // dashes, a colon, or a pipe.\n    // This is a stricter version than the built in check for lists, thematic\n    // breaks, and setex heading underlines though:\n    // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n    {\n      atBreak: true,\n      character: '-',\n      after: '[:|-]'\n    }],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  };\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(handleTableAsData(node, context, safeOptions), node.align);\n  }\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n\n\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions);\n    const value = serializeData([row]); // `markdown-table` will always add an align row\n\n    return value.slice(0, value.indexOf('\\n'));\n  }\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n\n\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell');\n    const subexit = context.enter('phrasing');\n    const value = (0,mdast_util_to_markdown_lib_util_container_phrasing_js__WEBPACK_IMPORTED_MODULE_0__.containerPhrasing)(node, context, { ...safeOptions,\n      before: around,\n      after: around\n    });\n    subexit();\n    exit();\n    return value;\n  }\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n\n\n  function serializeData(matrix, align) {\n    return (0,markdown_table__WEBPACK_IMPORTED_MODULE_1__.markdownTable)(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    });\n  }\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n\n\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children;\n    let index = -1;\n    /** @type {Array<Array<string>>} */\n\n    const result = [];\n    const subexit = context.enter('table');\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], context, safeOptions);\n    }\n\n    subexit();\n    return result;\n  }\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n\n\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children;\n    let index = -1;\n    /** @type {Array<string>} */\n\n    const result = [];\n    const subexit = context.enter('tableRow');\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, context, safeOptions);\n    }\n\n    subexit();\n    return result;\n  }\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n\n\n  function inlineCodeWithTable(node, parent, context) {\n    let value = (0,mdast_util_to_markdown_lib_handle_inline_code_js__WEBPACK_IMPORTED_MODULE_2__.inlineCode)(node, parent, context);\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&');\n    }\n\n    return value;\n  }\n}\n\n//# sourceURL=webpack://vadmin-front/./node_modules/mdast-util-gfm-table/lib/index.js?");

/***/ }),

/***/ "./node_modules/mdast-util-gfm-task-list-item/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mdast-util-gfm-task-list-item/lib/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gfmTaskListItemFromMarkdown\": function() { return /* binding */ gfmTaskListItemFromMarkdown; },\n/* harmony export */   \"gfmTaskListItemToMarkdown\": function() { return /* binding */ gfmTaskListItemToMarkdown; }\n/* harmony export */ });\n/* harmony import */ var mdast_util_to_markdown_lib_handle_list_item_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mdast-util-to-markdown/lib/handle/list-item.js */ \"./node_modules/mdast-util-to-markdown/lib/handle/list-item.js\");\n/* harmony import */ var mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-to-markdown/lib/util/track.js */ \"./node_modules/mdast-util-to-markdown/lib/util/track.js\");\n/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\n // To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\n\nconst gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n};\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\n\nconst gfmTaskListItemToMarkdown = {\n  unsafe: [{\n    atBreak: true,\n    character: '-',\n    after: '[:|-]'\n  }],\n  handlers: {\n    listItem: listItemWithTaskListItem\n  }\n};\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nfunction exitCheck(token) {\n  const node =\n  /** @type {ListItem} */\n  this.stack[this.stack.length - 2]; // We’re always in a paragraph, in a list item.\n\n  node.checked = token.type === 'taskListCheckValueChecked';\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitParagraphWithTaskListItem(token) {\n  const parent =\n  /** @type {Parents} */\n  this.stack[this.stack.length - 2];\n\n  if (parent && parent.type === 'listItem' && typeof parent.checked === 'boolean') {\n    const node =\n    /** @type {Paragraph} */\n    this.stack[this.stack.length - 1];\n    const head = node.children[0];\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children;\n      let index = -1;\n      /** @type {Paragraph | undefined} */\n\n      let firstParaghraph;\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index];\n\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling;\n          break;\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1);\n\n        if (head.value.length === 0) {\n          node.children.shift();\n        } else if (node.position && head.position && typeof head.position.start.offset === 'number') {\n          head.position.start.column++;\n          head.position.start.offset++;\n          node.position.start = Object.assign({}, head.position.start);\n        }\n      }\n    }\n  }\n\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\n\n\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0];\n  const checkable = typeof node.checked === 'boolean' && head && head.type === 'paragraph';\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] ';\n  const tracker = (0,mdast_util_to_markdown_lib_util_track_js__WEBPACK_IMPORTED_MODULE_0__.track)(safeOptions);\n\n  if (checkable) {\n    tracker.move(checkbox);\n  }\n\n  let value = (0,mdast_util_to_markdown_lib_handle_list_item_js__WEBPACK_IMPORTED_MODULE_1__.listItem)(node, parent, context, { ...safeOptions,\n    ...tracker.current()\n  });\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check);\n  }\n\n  return value;\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n\n  function check($0) {\n    return $0 + checkbox;\n  }\n}\n\n//# sourceURL=webpack://vadmin-front/./node_modules/mdast-util-gfm-task-list-item/lib/index.js?");

/***/ }),

/***/ "./node_modules/mdast-util-gfm/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/mdast-util-gfm/lib/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gfmFromMarkdown\": function() { return /* binding */ gfmFromMarkdown; },\n/* harmony export */   \"gfmToMarkdown\": function() { return /* binding */ gfmToMarkdown; }\n/* harmony export */ });\n/* harmony import */ var mdast_util_gfm_autolink_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-gfm-autolink-literal */ \"./node_modules/mdast-util-gfm-autolink-literal/lib/index.js\");\n/* harmony import */ var mdast_util_gfm_footnote__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mdast-util-gfm-footnote */ \"./node_modules/mdast-util-gfm-footnote/lib/index.js\");\n/* harmony import */ var mdast_util_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mdast-util-gfm-strikethrough */ \"./node_modules/mdast-util-gfm-strikethrough/lib/index.js\");\n/* harmony import */ var mdast_util_gfm_table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mdast-util-gfm-table */ \"./node_modules/mdast-util-gfm-table/lib/index.js\");\n/* harmony import */ var mdast_util_gfm_task_list_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mdast-util-gfm-task-list-item */ \"./node_modules/mdast-util-gfm-task-list-item/lib/index.js\");\n/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-gfm-table').Options} Options\n */\n\n\n\n\n\n/**\n * @returns {Array<FromMarkdownExtension>}\n */\n\nfunction gfmFromMarkdown() {\n  return [mdast_util_gfm_autolink_literal__WEBPACK_IMPORTED_MODULE_0__.gfmAutolinkLiteralFromMarkdown, (0,mdast_util_gfm_footnote__WEBPACK_IMPORTED_MODULE_1__.gfmFootnoteFromMarkdown)(), mdast_util_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_2__.gfmStrikethroughFromMarkdown, mdast_util_gfm_table__WEBPACK_IMPORTED_MODULE_3__.gfmTableFromMarkdown, mdast_util_gfm_task_list_item__WEBPACK_IMPORTED_MODULE_4__.gfmTaskListItemFromMarkdown];\n}\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\n\nfunction gfmToMarkdown(options) {\n  return {\n    extensions: [mdast_util_gfm_autolink_literal__WEBPACK_IMPORTED_MODULE_0__.gfmAutolinkLiteralToMarkdown, (0,mdast_util_gfm_footnote__WEBPACK_IMPORTED_MODULE_1__.gfmFootnoteToMarkdown)(), mdast_util_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_2__.gfmStrikethroughToMarkdown, (0,mdast_util_gfm_table__WEBPACK_IMPORTED_MODULE_3__.gfmTableToMarkdown)(options), mdast_util_gfm_task_list_item__WEBPACK_IMPORTED_MODULE_4__.gfmTaskListItemToMarkdown]\n  };\n}\n\n//# sourceURL=webpack://vadmin-front/./node_modules/mdast-util-gfm/lib/index.js?");

/***/ })

}]);